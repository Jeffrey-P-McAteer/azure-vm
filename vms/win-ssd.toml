
# Note: This machine is configured so we can jump into a terminal with
#   badssh -i /j/ident/github_id -p 2222 Jeffrey@127.0.0.1

[install]
boot_iso = "/mnt/scratch/vms/Win11_23H2_English_x64v2.iso"

[vm]
name = "Windows-WD-HDD"
mount_windows_virtio_iso = true
#disk_partuuid = "a061de90-d70a-4a16-a955-708d6c6c4627" # Looked up + the disk holding this partition is what's booted; ie blkid /dev/sda1
#disk_partuuid = "/dev/disk/by-id/wwn-0x50014ee6051db955"
disk_partuuid = "/dev/disk/by-id/ata-SSK_M001_1TB_SSKM0010000000001168"
ram_mb = 18128
#ram_mb = 26256

# windows 10/11 wants a BIOS declaring support for secure boot; when empty we can specify details in addtl_args[]
# bios_override = "/usr/share/edk2-ovmf/x64/OVMF_CODE.secboot.fd"
bios_override = ""

#root_disk_if_override = "virtio" # Results in "Inaccessible boot device"
root_disk_if_override = ""

# Needs to be "off" if we're using GTK GUI w/ "-disply gtk"
spice_gl_override = "off"

smp_override = "6,sockets=1,cores=6"
#smp_override = "1"
#smp_override = "" # Empty string now omits "-smp" controls entirely

# The "-cpu" addtl arguments enable hyper-v enlightenments, fast primitives that windows understands much like KVM!
#cpu_override = "host,hv_vapic,hv_relaxed,hv_vpindex,hv_time,hv_synic,hv_stimer,hv_tlbflush,hv_ipi,hv_frequencies,hv_avic,hv_xmm_input,hv_tlbflush_ext"
#cpu_override = "host"
cpu_override = "Broadwell-v4,hv_vapic,hv_relaxed,hv_vpindex,hv_time,hv_synic,hv_stimer,hv_tlbflush,hv_ipi,hv_frequencies,hv_avic,hv_xmm_input,hv_tlbflush_ext"

# q35 is necessary for modern EFI stuffs
#machine_override = "q35,accel=kvm,kernel_irqchip=on"
machine_override = "q35,accel=kvm"

# Appended to qemu command
addtl_args = [

  "-boot", "c",

  # USB keyboard & mouse grab-bag of hardware
  "-device", "qemu-xhci", "-device", "usb-kbd", "-device", "usb-tablet",

  # Windows 11 Secure-Boot firmware
  "-drive", "if=pflash,format=raw,readonly=on,file=/usr/share/edk2/x64/OVMF_CODE.secboot.4m.fd",
# Remember to run:
#    cp /usr/share/edk2/x64/OVMF_VARS.4m.fd /tmp/
  "-drive", "if=pflash,format=raw,file=/tmp/OVMF_VARS.4m.fd",

# These require inputs provided by preboot_cmds below; this does the windows 11-required TPM hardware config
  "-chardev", "socket,id=chrtpm,path=/tmp/tpm/swtpm-sock",
  "-tpmdev", "emulator,id=tpm0,chardev=chrtpm",
  "-device", "tpm-tis,tpmdev=tpm0",

# sudo pacman -S qemu-hw-usb-host

#  "-drive", "file=/j/downloads/Win11_24H2_English_x64.iso,index=1,media=cdrom",
#  "-boot", "menu=on",

# This allows us to connect to the serial console over TCP!
#    nc -v localhost 4321
#  "-serial", "telnet:localhost:4321,server,nowait",

# Or do this
#    socat - UNIX-CONNECT:/tmp/windowsserial
#  "-device", "pci-serial,chardev=windowsserial",
#  "-chardev", "socket,path=/tmp/windowsserial,server=on,wait=off,id=windowsserial",

]

rdp_uname = "jeffrey"
rdp_pass = "Passw0rd!"
rdp_pass_env = "WIN_SSD_RDP_P"

addtl_rdp_args = [
  # Run 'sudo opensc-tool --list-readers' for names
  #"/smartcard:Alcor Micro AU9540 00 00",
  "/smartcard:Alcor Link AK9563 00 00",

  # "/rfx",
  "/drive:FULL_CRISIS,/j/proj/full-crisis",
  "/drive:SURGE_STREAM,/j/proj/surge-stream",

  "/drive:data_star_arcpro_addin,/j/proj/data_star_arcpro_addin",
  "/drive:data_star_arcpro_plugindatasource,/j/proj/data_star_arcpro_plugindatasource",
  "/drive:data_star_core,/j/proj/data_star_core",
  "/drive:data_star_discipline_configuration_tool,/j/proj/data_star_discipline_configuration_tool",
  "/drive:data_star_project_documentation,/j/proj/data_star_project_documentation",

]


# Every one of these is passed in-order to /bin/sh -c "VALUE"
# For this particular VM, they handle the secure-boot and TPMv2 virtualization stuff win11 wants.
preboot_cmds = [
  # "sudo modprobe qxl",
  "echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs", # vastly improves reliability of windows boot!
  "mkdir -p /tmp/tpm",
  "cp /usr/share/edk2/x64/OVMF_VARS.4m.fd /tmp/",
  "swtpm socket --tpm2 --tpmstate dir=/tmp/tpm --ctrl type=unixio,path=/tmp/tpm/swtpm-sock",

  # hfile holds a flag file open that bumps the CPU to whatever it supports
  # "hfile /tmp/force-cpu-performance",

  # Power on jeff's second monitor; "hold" hangs around until killed, and so elegantly lets us power the monitor on while the VM is running and go back when it exits
  #"toggle-aoc hold silent",

]


